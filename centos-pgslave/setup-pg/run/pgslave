#!/bin/bash

FOLDER=/var/lib/pgsql/9.2
DATA=${FOLDER}/data
BACKUP=${FOLDER}/backups
ARCHIVE=${FOLDER}/archive
BACKUPTOOL=/usr/pgsql-9.2/bin/pg_basebackup



err() {
    read -r -d '' errmsg <<-ERRMSG
        The setup seems to have completed 
        Please now run with the (-r) argument OR
        for help just run without any argument.
ERRMSG

    echo "$errmsg"
}

usage() {
    read -r -d '' msg <<-EMSG

    To run the docker image ......

    Rule of thumb:
        * Always have to pass the -v option for <host>:<image> volume mapping. That's currently the way docker works
          now and allows database data to be persistent from run to run.
        * Just do 'docker run cybersiddhu/centos6-pgslave' for this help.

    1. Prepare postgresql server(one time)
       docker run -v <host-folder>:/var/lib/pgsql cybersiddhu/centos6-pgslave -P

    2. Initialize slave setup(one time)
       docker run -v <host-folder>:/var/lib/pgsql cybersiddhu/centos6-pgslave -s -i <ip> -u <username> -p <password> 

       -i : IP address of the master node
       -u : User name of database user with replication priviledge in master node
       -p : Password of the above user
       -s : Run the initial slave setup

    3. Start an instance(every time)
       docker run -v <host-folder>:/var/lib/pgsql cybersiddhu/centos6-pgslave -r -i [ip] -u [username] -p [password] 

       -r start the slave pg instance

       Rest of the arguments are optional here. Pass them if IP address of master has been changed.



EMSG

    echo  "$msg"
}

startpg() {

    sysctl -q kernel.shmmax=3221225472
    service postgresql-9.2 start
    format=`date '+%Y-%m'`
    tail -f /var/lib/pgsql/9.2/data/pg_log/postgresql-${format}.log
}

preparepg() {
    # setup database
    service postgresql-9.2 initdb
    service postgresql-9.2 start


    # account setup
    su postgres -s /usr/bin/psql -- -U postgres -c "ALTER ROLE postgres WITH ENCRYPTED PASSWORD 'postgres'"
    su postgres -s /usr/bin/createuser -- -U postgres -d -E -l -s admin
    su postgres -s /usr/bin/psql -- -U postgres -c "ALTER ROLE admin PASSWORD 'admin'"

    # add custom configuration; restart to take effect
    cp /config/pg_hba.conf  $DATA/
    cp /config/postgresql.conf $DATA/

    # kernel parameters to allow cus
    sysctl -q kernel.shmmax=3221225472
    service postgresql-9.2 restart

    # create admin database
    PGPASSWORD=admin createdb -U admin admin

    # create folders
    if [ ! -e $BACKUP ]; then 
        mkdir -p $BACKUP
        chown postgres:postgres $BACKUP
    fi

    if [ ! -e $ARCHIVE ]; then 
        mkdir -p $ARCHIVE
        chown postgres:postgres $ARCHIVE
    fi
    service postgresql-9.2 stop
}


OPTSPEC="i:u:p:shrP"
while getopts $OPTSPEC option
do
    case $option in
        i) ip=$OPTARG
            ;;
        u) user=$OPTARG
            ;;
        p) password=$OPTARG
            ;;
        s) setup=1
            ;;
        r) run=1
            ;;
        P) prepare=1
            ;;
        h) usage && exit 0
           ;;
        \?) echo "invalid option -$OPTARG" && exit 1
            ;;
    esac
done

if [ $OPTIND -eq 1 ]
then
    usage
elif [ $OPTIND -eq 2 ]
then
    if [ ${run+defined} ]
    then
        startpg
    elif [ ${prepare+defined} ]
    then
        preparepg
    else
        usage
    fi

elif [ $OPTIND -eq 8 -a ${run+defined} -a ${ip+defined} -a ${user+defined} -a ${password+defined} ]
then

    read -r -d '' recovery <<-EOR

    standby_mode = 'on'
    primary_conninfo = 'host=$ip port=5432 user=$user password=$password'

EOR

    su postgres -s /bin/echo -- "$recovery" > ${DATA}/recovery.conf
    startpg

elif [ $OPTIND -eq 8 -a ${setup+defined} -a ${ip+defined} -a ${user+defined} -a ${password+defined} ]
then
     if [ -e "${DATA}/recovery.conf" ]; then
        errmsg
        exit 0
    fi

    read -r -d '' recovery <<-EOR

        standby_mode = 'on'
        primary_conninfo = 'host=$ip port=5432 user=$user password=$password'
EOR

    su postgres -s /bin/echo -- "$recovery" > ${DATA}/recovery.conf

    if [ ! -e $BACKUP ]; then 
        mkdir -p $BACKUP
        chown postgres:postgres $BACKUP
    fi

    PGPASSWORD=$password su postgres -s $BACKUPTOOL -- -h $ip -U $user -c fast -P -D $BACKUP
    su postgres -s /usr/bin/rsync -- -a --exclude '*.conf'  --exclude pg_xlog --exclude 'postmaster.pid' $BACKUP/  $DATA/
    chmod 0700 $DATA
    sysctl -q kernel.shmmax=3221225472
    service postgresql-9.2 start
    service postgresql-9.2 stop
else
    usage
fi




