#!/bin/bash

FOLDER=/var/lib/pgsql/9.2
DATA=${FOLDER}/data
BACKUP=${FOLDER}/backups
ARCHIVE=${FOLDER}/archive
DEFAULT_SERVICE=postgresql-service
DEFAULT_DIR_KEY=docker-container
DEFAULT_CNAME=container


getip() {
    local ip=$(ip -4 -o addr show eth0 | awk '{split($4,a,"/"); print a[1]}')
    echo $ip
}

getkey(){
        [ ${REGISTER_DIR_KEY+defined} ] && DEFAULT_DIR_KEY=${REGISTER_DIR_KEY}
        [ ${REGISTER_SERVICE+defined} ] && DEFAULT_SERVICE=${REGISTER_SERVICE}
        local key=http://${DOCKER_INTERFACE}:4001/v1/keys/${DEFAULT_DIR_KEY}/${DEFAULT_SERVICE}/$1
        echo $key
}

subscribehost() {
    if [ ${DOCKER_INTERFACE+defined} ];then
        local hostkey=$(getkey $1)/host
        [ $(curl -i -L $hostkey --stderr /dev/null | awk '/HTTP/ {print $2}') -eq 200 ] &&  curl -L $hostkey --stderr /dev/null -X DELETE
        local ip=$(getip)
        [ $(curl -i -L $hostkey --stderr /dev/null -d value="${ip}" | awk '/HTTP/ {print $2}') -eq 200 ] || echo unable to register host
    fi
}

unsubscribehost() {
    if [ ${DOCKER_INTERFACE+defined} ];then
        local hostkey=$(getkey $1)/host
        [ $(curl -i -L $hostkey --stderr /dev/null | awk '/HTTP/ {print $2}') -eq 200 ] &&  curl -L $hostkey --stderr /dev/null -X DELETE
    fi
}

err() {
    read -r -d '' errmsg <<-ERRMSG
        The setup seems to have completed 
        Please now run with the (-r) argument OR
        for help just run without any argument.
ERRMSG

    echo "$errmsg"
}

usage() {
    read -r -d '' msg <<-EMSG

    To run the docker image ......

    Rule of thumb:
        * Always have to pass the -v option for <host>:<image> volume mapping. That's currently the way docker works
          now and allows database data to be persistent from run to run.
        * Just do 'docker run <image>' for this help.

    1. Prepare postgresql server(one time)

       docker run -v <host-folder>:/var/lib/pgsql <image> -P


    2. Create user(one time) with replication priviledge

       docker run -v <host-folder>:/var/lib/pgsql <image> -S -u <username> -p <password> 

        -u : User name of database user with replication priviledge which standby server will use to connect
        -p : Password of the above user



    3. Start an instance(every time)

       docker run -d -v <host-folder>:/var/lib/pgsql  <image> -R <container name>

        -R start the master pg instance
           Needs a container name to register with etcd service



    4. Create an database 

       docker run -v <host-folder>:/var/lib/pgsql <image> -C <dbname>

       The above with create a database and user with the given name. The name
       will also be assigned as the starting password. Please, change it as
       neccessary.
       


EMSG

    echo  "$msg"
}

stoppg() {
    service postgresql-9.2 stop
    logger -s stopped postgresql service
    [ ${DOCKER_INTERFACE+defined} ] && unsubscribehost $DEFAULT_CNAME
    exit $1
}

startpg() {

    sysctl -q kernel.shmmax=3221225472
    service postgresql-9.2 start

    logger -s started postgresql service

    format=`date '+%Y-%m'`
    tail  -n 30 /var/lib/pgsql/9.2/data/pg_log/postgresql-${format}.log
    while [ true ];
    do
        sleep 20
    done

}

preparepg() {
    # setup database
    service postgresql-9.2 initdb
    service postgresql-9.2 start


    # account setup
    su postgres -s /usr/bin/psql -- -U postgres -c "ALTER ROLE postgres WITH ENCRYPTED PASSWORD 'postgres'"
    su postgres -s /usr/bin/createuser -- -U postgres -d -E -l -s admin
    su postgres -s /usr/bin/psql -- -U postgres -c "ALTER ROLE admin PASSWORD 'admin'"

    # add custom configuration; restart to take effect
    cp /config/pg_hba.conf  $DATA/
    cp /config/postgresql.conf $DATA/

    # kernel parameters to allow custom shared memory for pg
    sysctl -q kernel.shmmax=3221225472
    service postgresql-9.2 restart

    # create admin database
    PGPASSWORD=admin createdb -U admin admin

    # create folders
    if [ ! -e $BACKUP ]; then 
        mkdir -p $BACKUP
        chown postgres:postgres $BACKUP
    fi

    if [ ! -e $ARCHIVE ]; then 
        mkdir -p $ARCHIVE
        chown postgres:postgres $ARCHIVE
    fi
    service postgresql-9.2 stop
}

newuser() {
    PGPASSWORD=admin createuser -U admin -d -E -l $1
    PGPASSWORD=admin psql -U admin -c "ALTER ROLE $1 PASSWORD '$1'"
    PGPASSWORD=$1 createdb -U $1 -h 127.0.0.1 $1
}

trap stoppg SIGHUP SIGINT SIGQUIT SIGTERM SIGKILL SIGSTOP

OPTSPEC="u:p:C:R:ShP"
while getopts $OPTSPEC option
do
    case $option in
        u) user=$OPTARG
            ;;
        p) password=$OPTARG
            ;;
        S) setup=1
            ;;
        C) dbname=$OPTARG
            ;;
        R) run=$OPTARG
            ;;
        P) prepare=1
            ;;
        h) usage && exit 0
           ;;
        \?) echo "invalid option -$OPTARG" && exit 1
            ;;
    esac
done

if [ $OPTIND -eq 1 ]
then
    usage
elif [ $OPTIND -eq 2 ]
then
    if [ ${prepare+defined} ]
    then
        preparepg
    else
        usage
    fi
elif [ $OPTIND -eq 6 -a ${setup+defined} -a ${user+defined} -a ${password+defined} ]
then
    read -r -d '' replication <<-EOR

        host  replication  $user  0.0.0.0/0   md5
EOR

    su postgres -s /bin/echo -- "$replication" >> ${DATA}/pg_hba.conf

    sysctl -q kernel.shmmax=3221225472
    service postgresql-9.2 start

    # create user for replication
    PGPASSWORD=postgres createuser -U postgres -s -l -E --replication $user
    PGPASSWORD=postgres psql -U postgres -c "ALTER ROLE replica PASSWORD '$password'"
    service postgresql-9.2 stop
elif [ $OPTIND -eq 3 ]
then
    if [ ${run+defined} ]
    then
        subscribehost $run
        DEFAULT_CNAME=$run
        startpg
    elif [ ${dbname+defined} ]
    then
        sysctl -q kernel.shmmax=3221225472
        service postgresql-9.2 restart
        newuser $dbname
        stoppg
    fi
else
    usage
fi




